
* page 

1. page = .js, .jsx, .ts, .tsx

2. Page with Dynamic Routes
   pages/posts/[id].js = > posts/1, posts/2

3. pre-rendering
모든 페이지가 pre renders이다.
기본적으로 Next.js는 모든 페이지를 미리 렌더링합니다. 
즉, Next.js는 클라이언트측 자바스크립트에 의해 모두 수행되는 
대신 각 페이지에 대해 HTML을 미리 생성합니다. 프리렌더링은 
더 나은 성능과 SEO를 가져올 수 있습니다.
생성된 각 HTML은 해당 페이지에 필요한 최소한의 JavaScript 코드와 연결됩니다.
브라우저에 페이지가 로드되면 해당 JavaScript 코드가 실행되어 페이지가 
완전히 상호 작용하게 됩니다(이 과정을 수화라고 합니다).


4. Two forms of Pre-rendering

Static Generation (정적 생성)
Server-side Rendering (서버측에서 렌더링)
차이점은 : 페이지를 위해 HTML 생성할 때

Server-side Rendering = HTML가 PAGE 마다 생성된다. ( hybrid )
대부분의 페이지에는 정적 생성을 사용하고 다른 페이지에는 
서버 측 렌더링을 사용하여 "하이브리드" Next.js 앱을 만들 수 있습니다.
성능상의 이유로 서버측 렌더링보다 정적 생성을 사용하는 것이 좋습니다. 
정적으로 생성된 페이지는 성능 향상을 위한 추가 구성 없이 CDN에 의해 
캐시될 수 있습니다. 
그러나 경우에 따라 서버측 렌더링이 유일한 옵션일 수 있습니다.

정적 생성 또는 서버 측 렌더링과 함께 클라이언트 측 렌더링을 사용할 수도 있습니다. 
즉, 페이지의 일부분은 클라이언트 측 JavaScript에 의해 완전히 렌더링될 수 있습니다. 
자세한 내용은 Data Fetching 설명서를 참조하십시오.

Static Generation = 
HTML는 
1. next build 할 때 생성된다. 
2. 각각 페이지 요청할 때 생성되지 않는다.
3. CDN에 캐쉬되어 진다.


1. Static Generation without data
 fetching data 없이 사용 할 수 있다.

function About() {
  return <div>About</div>
}

export default About

이 페이지는 사전 렌더링을 위해 외부 데이터를 가져올 필요가 없습니다. 
이와 같은 경우, Next.js는 빌드 시간 동안 페이지당 하나의 HTML 파일을 생성합니다.

2. Static Generation with data
   
   2가지 방법 
  1. getStaticProps => 페이지가 외부의 데이터에 의해 구성될 때
  2. getStaticPaths => 페이지가 외부의 데이터에 의해 paths할 때
		     (usually in addition to getStaticProps)
  

- Your page content depends on external data ( getStaticProps )




